spring을 통해 개발을 해봤다고 한다면 면접 때마다 항상 듣던 질문

"DI가 뭔지 아시나요?" 

​ 

그리고 정확히 알지 못하고 로봇처럼 했던 대답

"DI는 dependency Inject, 의존 주입으로 내가 생성하지 않아도 spring container가 자동으로 객체들을 관리해주어 new 같은 멍령어를 쓰지않아도 되고.... "



해당 대답은 맞는말이지만 틀렸다.



java프로그래밍은 객체지향 프로그래밍이다. 객체지향의 한가지 특징으로는 유연성이 존재한다.



건전지가 필요한 장난감을 일체형으로 만든다면 해당 장난감은 건전지가 다되면 작동할 수 없다.

그러나 건전지와 장난감이 분리가 가능하다면 건전지가 다 되었을 때, 건전지를 바꿔껴 계속 작동시킬 수 있다.



객체지향관점에서 본다면 장난감과 건전지 객체가 있고 건전지가 다 된다면 다른 건전지 객체로 바꿀 수 있다.





ex) class Toy {



    private battery;



    Toy(Battery battery) {

        this.battery = battery;

    }



    void setBattery(Battery battery) {

       this.battery = battery;

    }

}

장난감은 건전지 상태에 따라 기능들이 변할 수 있고 장난감은 건전지에 의존적이라고 할 수 있다.

위의 예시와 같이 객체를 어떤 객체에 삽입만 하면 그것을 DI프로그래밍 방법이라고 부른다.


java에서는 생성자 메소드나 set메소드를 통해 Toy객체에 battery객체를 주입할 수 있다.​







Spring의 관점에서 DI를 이해해보자.



Spring에서는 DI를 Java보다 좀더 체계적으로 사용하고 있다. 

Container라는 객체를 관리하는 상자를 두고 의존관계가 필요한 객체들을 해당 Container에 담아둔다.

의존관계를 주입시켜야 할 때 Container에서 필요한 객체를 불러와 사용한다.



Container안에 있는 객체들 사이에도 주입관계가 들어있다.

예를들어 Container에 장난감 객체와 배터리 객체가 있고 장난감 객체에 배터리 객체를 주입시킨다면 Container에 있는 장난감 객체는 주입받은 배터리 객체를 가지고 있다.



Spring은 Container에서 객체관리와 의존주입을 대신해주는데 비해 java에서는 프로그래머가 직접 해야한다는 차이점이 있다.



이 차이점으로 인해 등장한 말이 있다.

IOC (Inversion Of Control) : 프로그래머가 직접 객체를 관리하던것을 Container가 대신한다.

                            Control하는 관계가 역전되었다라고 표현하는 것같다.





참고 : 인프런