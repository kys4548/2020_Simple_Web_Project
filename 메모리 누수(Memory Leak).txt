	
메모리 누수(Memory Leak)  Java   

C++언어에서는 new를 사용하거나 malloc 등으로 메모리를 할당하여 객체를 생성한다.

객체를 생성하면서 할당한 메모리를 사용이 끝난 뒤 해제해 주지 않으면 그것이 메모리 누수가 된다.

(사용되지는 않지만 메모리의 공간을 차지하고 있는 상태)



사용이 끝날 때마다 할당된 메모리를 해제해주면 되지만 한 소스코드에 메모리를 할당받는 객체가 수백개라면 실수로 해제를 하지않아 메모리 누수가 발생할 수도 있다.



이런 경우를 방지하기 위해서 C++에서는 소멸자 메소드에서 메모리를 해제할 수도 있다.

그러나 아무리 꼼꼼하게 했더라도 코드양이 많아지다보면 메모리 누수는 언젠가는 겪게 될 것이다.



서버에서의 메모리 누수는 치명적이다.

아주작은 byte의 메모리가 누수됐어도 서버는 문제없이 잘 동작한다.

그러다 쌓이고 쌓여 하루이틀 뒤에 갑자기 서버가 꺼지는 사태가 발생하기도 한다.

메모리 누수로 인해 운영체제에서 할당해준 메모리 양보다 서버가 더 많은 메모리를 사용하려고 하고

운영체제의 영역이나 다른 프로세스의 영역에 접근할 수 있으므로 운영체제가 해당 서버를 보안적인 문제로 종료시켜버린다.  



Java에서는 해당 문제를 해결하기 위해 GC(garbage Collection)이 존재하고 사용자가 직접 메모리 해제작업을 하지않아도 자동으로 사용되지 않는 메모리 영역을 찾아 해제를 해준다.



Java언어에서는 메모리 누수에 대한 걱정을 전혀 하지 않아도 되는가?

아니다. 

프로그래머의 잘못된 코드작성으로 인해 사용되지 않는 객체가 계속 참조되고 있다면 메모리 누수로 이어질 수 있다.

그렇기에 Java언어를 쓰더라도 메모리 누수에 대해 어느정도 인지를 하고 있어야한다.

또 메모리 해제를 효율적으로 관리하기 위해 GC에 대해서도 공부를 해야할 것이다.



springframework에서는 객체의 소멸뿐 아니라 Container를 이용해 객체의 생성까지 프로그램에게 맡겨버리고 있다.